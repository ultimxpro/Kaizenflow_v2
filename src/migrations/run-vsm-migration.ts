// Script d'ex√©cution de la migration VSM
// √Ä ex√©cuter dans la console du navigateur ou via Node.js

import { migrateVSMData, checkVSMMigrationStatus, rollbackVSMMigration } from './migrate-vsm-data';

// Fonction principale pour ex√©cuter la migration
export const runVSMMigration = async () => {
  console.log('üöÄ Script de migration VSM - D√©marrage...\n');

  try {
    // V√©rifier l'√©tat avant migration
    console.log('üìä √âtat avant migration:');
    await checkVSMMigrationStatus();
    console.log('');

    // Demander confirmation
    const shouldProceed = confirm(
      '‚ö†Ô∏è ATTENTION: Cette migration va transf√©rer toutes les donn√©es VSM existantes vers les nouvelles tables.\n\n' +
      'Assurez-vous que:\n' +
      '1. Les nouvelles tables VSM ont √©t√© cr√©√©es dans Supabase\n' +
      '2. Vous avez fait une sauvegarde de la base de donn√©es\n' +
      '3. Aucun utilisateur n\'est en train d\'√©diter des cartes VSM\n\n' +
      'Voulez-vous continuer ?'
    );

    if (!shouldProceed) {
      console.log('‚ùå Migration annul√©e par l\'utilisateur');
      return;
    }

    // Ex√©cuter la migration
    console.log('üîÑ Ex√©cution de la migration...\n');
    await migrateVSMData();
    console.log('');

    // V√©rifier l'√©tat apr√®s migration
    console.log('üìä √âtat apr√®s migration:');
    await checkVSMMigrationStatus();
    console.log('');

    console.log('üéâ Migration termin√©e avec succ√®s !');
    console.log('‚úÖ Vous pouvez maintenant utiliser les nouvelles fonctionnalit√©s VSM');

  } catch (error) {
    console.error('üí• Erreur lors de la migration:', error);

    // Proposer le rollback
    const shouldRollback = confirm(
      '‚ùå Une erreur s\'est produite lors de la migration.\n' +
      'Voulez-vous effectuer un rollback pour revenir √† l\'√©tat pr√©c√©dent ?'
    );

    if (shouldRollback) {
      try {
        console.log('üîÑ Ex√©cution du rollback...');
        await rollbackVSMMigration();
        console.log('‚úÖ Rollback termin√©');
      } catch (rollbackError) {
        console.error('‚ùå Erreur lors du rollback:', rollbackError);
      }
    }
  }
};

// Fonction pour v√©rifier seulement l'√©tat
export const checkMigrationStatus = async () => {
  console.log('üìä V√©rification de l\'√©tat de migration VSM...\n');
  try {
    await checkVSMMigrationStatus();
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
};

// Fonction pour rollback seulement
export const runRollback = async () => {
  const shouldRollback = confirm(
    '‚ö†Ô∏è ATTENTION: Cette action va supprimer toutes les donn√©es VSM migr√©es et revenir √† l\'ancien syst√®me.\n\n' +
    'Toutes les modifications apport√©es aux cartes VSM depuis la migration seront perdues.\n\n' +
    'Voulez-vous vraiment continuer ?'
  );

  if (!shouldRollback) {
    console.log('‚ùå Rollback annul√© par l\'utilisateur');
    return;
  }

  try {
    console.log('üîÑ Ex√©cution du rollback...');
    await rollbackVSMMigration();
    console.log('‚úÖ Rollback termin√©');
  } catch (error) {
    console.error('‚ùå Erreur lors du rollback:', error);
  }
};

// Instructions d'utilisation
console.log(`
üéØ MIGRATION VSM - INSTRUCTIONS D'UTILISATION

Pour ex√©cuter la migration compl√®te:
  runVSMMigration()

Pour v√©rifier l'√©tat de la migration:
  checkMigrationStatus()

Pour effectuer un rollback (en cas de probl√®me):
  runRollback()

‚ö†Ô∏è IMPORTANT:
- Faites une sauvegarde compl√®te de votre base de donn√©es avant la migration
- Assurez-vous que les nouvelles tables VSM ont √©t√© cr√©√©es dans Supabase
- Aucun utilisateur ne doit √™tre en train d'√©diter des cartes VSM pendant la migration
- La migration peut prendre du temps selon le nombre de cartes VSM

üìû Support:
En cas de probl√®me, contactez l'√©quipe technique avec les logs d'erreur.
`);

// Exposer les fonctions globalement pour utilisation en console
if (typeof window !== 'undefined') {
  (window as any).runVSMMigration = runVSMMigration;
  (window as any).checkMigrationStatus = checkMigrationStatus;
  (window as any).runRollback = runRollback;
}