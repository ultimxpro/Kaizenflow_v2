// Script de test pour v√©rifier l'int√©gration VSM apr√®s migration
// √Ä ex√©cuter apr√®s la migration pour valider que tout fonctionne correctement

import { supabase } from '../Lib/supabase';

export const testVSMIntegration = async () => {
  console.log('üß™ Test d\'int√©gration VSM - D√©marrage...\n');

  try {
    // Test 1: V√©rifier que les tables existent et sont accessibles
    console.log('1Ô∏è‚É£ Test des tables VSM...');
    const tables = ['vsm_maps', 'vsm_elements', 'vsm_connections', 'vsm_snapshots', 'vsm_comments'];

    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('count', { count: 'exact', head: true });

        if (error) throw error;
        console.log(`   ‚úÖ Table ${table}: accessible`);
      } catch (error) {
        console.log(`   ‚ùå Table ${table}: ${(error as Error).message}`);
      }
    }

    // Test 2: V√©rifier les politiques RLS
    console.log('\n2Ô∏è‚É£ Test des politiques RLS...');
    try {
      const { data, error } = await supabase
        .from('vsm_maps')
        .select('*')
        .limit(1);

      if (error && error.code === 'PGRST116') {
        console.log('   ‚úÖ RLS activ√© (acc√®s refus√© sans authentification)');
      } else if (!error) {
        console.log('   ‚ö†Ô∏è RLS peut-√™tre d√©sactiv√© ou utilisateur authentifi√©');
      } else {
        console.log(`   ‚ùå Erreur RLS: ${error.message}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur lors du test RLS: ${(error as Error).message}`);
    }

    // Test 3: V√©rifier la migration des donn√©es
    console.log('\n3Ô∏è‚É£ Test de la migration des donn√©es...');
    try {
      const { data: maps, error: mapsError } = await supabase
        .from('vsm_maps')
        .select('id, module_id, title, created_at');

      if (mapsError) throw mapsError;

      console.log(`   üìä ${maps?.length || 0} carte(s) VSM trouv√©e(s)`);

      if (maps && maps.length > 0) {
        // Test d'une carte sp√©cifique
        const testMap = maps[0];
        console.log(`   üß™ Test de la carte: ${testMap.title}`);

        // V√©rifier les √©l√©ments
        const { data: elements, error: elementsError } = await supabase
          .from('vsm_elements')
          .select('id, element_type, name')
          .eq('map_id', testMap.id);

        if (elementsError) throw elementsError;
        console.log(`      üì¶ ${elements?.length || 0} √©l√©ment(s) trouv√©(s)`);

        // V√©rifier les connexions
        const { data: connections, error: connectionsError } = await supabase
          .from('vsm_connections')
          .select('id, connection_type')
          .eq('map_id', testMap.id);

        if (connectionsError) throw connectionsError;
        console.log(`      üîó ${connections?.length || 0} connexion(s) trouv√©e(s)`);

        // V√©rifier les commentaires
        const { data: comments, error: commentsError } = await supabase
          .from('vsm_comments')
          .select('id, content')
          .eq('map_id', testMap.id);

        if (commentsError) throw commentsError;
        console.log(`      üí¨ ${comments?.length || 0} commentaire(s) trouv√©(s)`);
      }

    } catch (error) {
      console.log(`   ‚ùå Erreur lors du test des donn√©es: ${(error as Error).message}`);
    }

    // Test 4: V√©rifier les indexes et performances
    console.log('\n4Ô∏è‚É£ Test des performances...');
    try {
      const startTime = Date.now();

      // Test de requ√™te avec jointure
      const { data, error } = await supabase
        .from('vsm_elements')
        .select(`
          id,
          element_type,
          name,
          vsm_maps!inner(title)
        `)
        .limit(10);

      const endTime = Date.now();
      const duration = endTime - startTime;

      if (error) throw error;

      console.log(`   ‚ö° Requ√™te ex√©cut√©e en ${duration}ms`);
      console.log(`   üìà ${data?.length || 0} √©l√©ment(s) r√©cup√©r√©(s) avec jointure`);

      if (duration > 1000) {
        console.log('   ‚ö†Ô∏è Performance: requ√™te lente (>1s), v√©rifier les indexes');
      } else {
        console.log('   ‚úÖ Performance: requ√™te rapide');
      }

    } catch (error) {
      console.log(`   ‚ùå Erreur lors du test de performance: ${(error as Error).message}`);
    }

    // Test 5: Test des fonctionnalit√©s avanc√©es
    console.log('\n5Ô∏è‚É£ Test des fonctionnalit√©s avanc√©es...');

    // Test snapshots
    try {
      const { data: snapshots, error } = await supabase
        .from('vsm_snapshots')
        .select('count', { count: 'exact', head: true });

      if (error) throw error;
      console.log(`   üì∏ ${snapshots || 0} snapshot(s) disponible(s)`);
    } catch (error) {
      console.log(`   ‚ùå Erreur snapshots: ${(error as Error).message}`);
    }

    console.log('\nüéâ Tests d\'int√©gration termin√©s !');
    console.log('\nüìã R√©sum√©:');
    console.log('- V√©rifiez les ‚úÖ pour les tests r√©ussis');
    console.log('- V√©rifiez les ‚ùå pour les erreurs √† corriger');
    console.log('- V√©rifiez les ‚ö†Ô∏è pour les avertissements');

  } catch (error) {
    console.error('üí• Erreur g√©n√©rale lors des tests:', error);
  }
};

// Fonction de test rapide (connexion seulement)
export const testVSMConnection = async () => {
  console.log('üîó Test de connexion VSM...');

  try {
    const { data, error } = await supabase
      .from('vsm_maps')
      .select('count', { count: 'exact', head: true });

    if (error) throw error;

    console.log('‚úÖ Connexion VSM r√©ussie');
    return true;

  } catch (error) {
    console.log(`‚ùå Erreur de connexion VSM: ${(error as Error).message}`);
    return false;
  }
};

// Exposer les fonctions globalement
if (typeof window !== 'undefined') {
  (window as any).testVSMIntegration = testVSMIntegration;
  (window as any).testVSMConnection = testVSMConnection;
}

console.log(`
üß™ TESTS D'INT√âGRATION VSM

Commandes disponibles:
- testVSMConnection()     # Test rapide de connexion
- testVSMIntegration()    # Test complet d'int√©gration

Ex√©cutez ces commandes dans la console du navigateur apr√®s la migration.
`);