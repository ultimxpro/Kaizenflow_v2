// Script de test pour v√©rifier les connexions VSM
// √Ä ex√©cuter dans la console du navigateur

import { supabase } from './Lib/supabase';

export const testVSMConnections = async () => {
  console.log('üîç Test des connexions VSM...\n');

  try {
    // 1. V√©rifier les cartes VSM
    const { data: maps, error: mapsError } = await supabase
      .from('vsm_maps')
      .select('id, title')
      .limit(5);

    if (mapsError) throw mapsError;

    console.log(`üìã Cartes VSM trouv√©es: ${maps?.length || 0}`);
    if (maps && maps.length > 0) {
      maps.forEach((map, index) => {
        console.log(`   ${index + 1}. ${map.title} (ID: ${map.id})`);
      });

      // 2. Pour la premi√®re carte, v√©rifier les √©l√©ments
      const firstMap = maps[0];
      console.log(`\nüîç Analyse de la carte: ${firstMap.title}`);

      const { data: elements, error: elementsError } = await supabase
        .from('vsm_elements')
        .select('id, name, type')
        .eq('map_id', firstMap.id);

      if (elementsError) throw elementsError;

      console.log(`üì¶ √âl√©ments trouv√©s: ${elements?.length || 0}`);
      if (elements && elements.length > 0) {
        elements.forEach((el, index) => {
          console.log(`   ${index + 1}. ${el.name || 'Sans nom'} (${el.type}) - ID: ${el.id}`);
        });
      }

      // 3. V√©rifier les connexions
      const { data: connections, error: connectionsError } = await supabase
        .from('vsm_connections')
        .select('*')
        .eq('map_id', firstMap.id);

      if (connectionsError) throw connectionsError;

      console.log(`üîó Connexions trouv√©es: ${connections?.length || 0}`);
      if (connections && connections.length > 0) {
        connections.forEach((conn, index) => {
          console.log(`   ${index + 1}. ${conn.from_element_id} ‚Üí ${conn.to_element_id}`);
          console.log(`       Type: ${conn.connection_type}, Fl√®che: ${conn.arrow_type || 'Aucune'}`);
          if (conn.label) console.log(`       Label: ${conn.label}`);
          if (conn.details) console.log(`       D√©tails: ${conn.details}`);
        });
      } else {
        console.log('   ‚ùå Aucune connexion trouv√©e !');
        console.log('   üí° Les connexions devraient √™tre cr√©√©es automatiquement avec l\'exemple');
      }
    }

  } catch (error) {
    console.log(`‚ùå Erreur lors du test: ${(error as Error).message}`);
  }

  console.log('\nüéØ Test termin√©!');
};

// Test rapide pour voir si les connexions sont visibles dans l'interface
export const checkVSMCanvasConnections = () => {
  console.log('üé® V√©rification des connexions dans le canvas...\n');

  // Chercher les √©l√©ments SVG de connexions
  const svgElements = document.querySelectorAll('svg line, svg path, svg polygon');
  console.log(`üîç √âl√©ments SVG trouv√©s: ${svgElements.length}`);

  // Chercher les √©l√©ments de connexion dans le DOM
  const connectionElements = document.querySelectorAll('[data-connection], .connection, .vsm-connection');
  console.log(`üîó √âl√©ments de connexion trouv√©s: ${connectionElements.length}`);

  if (svgElements.length === 0 && connectionElements.length === 0) {
    console.log('‚ùå Aucune connexion visible dans l\'interface');
    console.log('üí° V√©rifiez que les connexions sont bien cr√©√©es dans la base de donn√©es');
  } else {
    console.log('‚úÖ Des √©l√©ments graphiques de connexion sont pr√©sents');
  }

  console.log('\nüéØ V√©rification termin√©e!');
};

// Exposer les fonctions globalement
if (typeof window !== 'undefined') {
  (window as any).testVSMConnections = testVSMConnections;
  (window as any).checkVSMCanvasConnections = checkVSMCanvasConnections;
}

console.log(`
üß™ SCRIPTS DE TEST DES CONNEXIONS VSM DISPONIBLES:

testVSMConnections()              # V√©rifie les connexions en base
checkVSMCanvasConnections()       # V√©rifie l'affichage dans l'interface

Ex√©cutez ces commandes dans la console du navigateur.
`);