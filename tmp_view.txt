import React, { useMemo, useState } from 'react';import { A3Module } from '../../../types/database';import { useDatabase } from '../../../contexts/DatabaseContext';import { Shield, HelpCircle, X, Plus, Trash2, User, CalendarDays, Check } from 'lucide-react';import { TWTTPHelp } from './TWTTPHelp';// RÃ©ponses standardstype AnswerYN = 'Oui' | 'Partiellement' | 'Non' | '';// HERCA quick-check structuresinterface HercaQuestion { code?: string; text: string; answer: AnswerYN; }interface HercaCategory { key: string; title: string; questions: HercaQuestion[]; }interface HercaContent {  meta?: { service?: string; team_expert?: string; problem?: string };  detection_sources?: string[];  training?: { formation_poste?: boolean; formation_salle?: boolean; methodes_videos?: boolean; aides_visuelles?: boolean; autre?: string };  categories: HercaCategory[];}// Tableau actions TWTTPinterface TWTTPItem {  id: string;  step: string; // Ã‰tape / ActivitÃ©  error: string; // Erreur potentielle  consequence?: string; // ConsÃ©quence  herca: string; // Cause dominante (HERCA)  control_kind: 'PrÃ©vention' | 'DÃ©tection' | 'Correction';  poka_yoke: string; // IdÃ©e de contrÃ´le  owner_id?: string; // Responsable (membre du projet)  due_date?: string; // YYYY-MM-DD  status?: 'Ã€ faire' | 'En cours' | 'Fait';  notes?: string;}interface TWTTPContent { items: TWTTPItem[]; }const makeId = () => Math.random().toString(36).slice(2) + Date.now().toString(36);const HERCA_OPTIONS = [  'ProcÃ©dure / Standard',  'Connaissance / Formation',  'Outillage / Interface',  'Communication',  'Attention / MÃ©moire',  'Environnement / Organisation'];const STATUS_OPTIONS: Array<TWTTPItem['status']> = ['Ã€ faire', 'En cours', 'Fait'];// Questionnaire Usine (TWTTP + HERCA)type QAType = 'text' | 'textarea' | 'date' | 'select' | 'radio3' | 'checkboxes';interface QAItem { key: string; label: string; type: QAType; options?: string[]; value?: string | string[]; }interface QACategory { key: string; title: string; questions: QAItem[]; }const DEFAULT_USINE_FORM: QACategory[] = [  {    key: 'identification',    title: '1. Identification du problÃ¨me',    questions: [      { key: 'probleme', label: 'Quel est le problÃ¨me constatÃ© ?', type: 'textarea', value: '' },      { key: 'date_detection', label: 'Quelle est la date de dÃ©tection de lâ€™erreur ?', type: 'date', value: '' },      { key: 'date_entretien', label: 'Quelle est la date du premier entretien / suivi ?', type: 'date', value: '' },      { key: 'type_erreur', label: 'Quel est le type dâ€™erreur ?', type: 'select', options: ["Oubli dâ€™opÃ©ration", 'Processus non suivi', 'Erreur de composant', 'Autre'], value: '' }    ]  },  {    key: 'contexte',    title: '2. Contexte',    questions: [      { key: 'etablissement', label: 'Dans quel Ã©tablissement / usine se situe le problÃ¨me ?', type: 'text', value: '' },      { key: 'secteur', label: 'Dans quel secteur, ligne, poste de travail ?', type: 'text', value: '' },      { key: 'equipe', label: 'Sur quelle Ã©quipe ?', type: 'select', options: ['Matin', 'Soir', 'Nuit', 'Normale', 'Autre'], value: '' },      { key: 'operateur', label: 'Quel opÃ©rateur est concernÃ© ?', type: 'text', value: '' },      { key: 'interviewer', label: 'Qui rÃ©alise lâ€™entretien (nom, fonction) ?', type: 'text', value: '' }    ]  },  {    key: 'comprehension',    title: '3. ComprÃ©hension du travail (OpÃ©rateur)',    questions: [      { key: 'comment_operation', label: 'Comment effectuez-vous cette opÃ©ration ?', type: 'textarea', value: '' },      { key: 'etapes_essentielles', label: 'Quelles sont, selon vous, les Ã©tapes essentielles ?', type: 'textarea', value: '' },      { key: 'methode_eviter_erreur', label: 'Avez-vous une mÃ©thode claire pour Ã©viter de vous tromper ?', type: 'textarea', value: '' }    ]  },  {    key: 'conditions',    title: '4. Conditions de travail',    questions: [      { key: 'instructions_accessibles', label: 'Les instructions sont-elles accessibles et comprÃ©hensibles ?', type: 'radio3', value: '' },      { key: 'outils_adaptes', label: 'Les outils et moyens sont-ils adaptÃ©s ?', type: 'radio3', value: '' },      { key: 'temps_suffisant', label: 'Le temps est-il suffisant pour rÃ©aliser correctement lâ€™opÃ©ration ?', type: 'radio3', value: '' }    ]  },  {    key: 'formation',    title: '5. Formation et accompagnement',    questions: [      { key: 'forme_poste', label: 'Avez-vous Ã©tÃ© formÃ© Ã  ce poste ?', type: 'radio3', value: '' },      { key: 'qui_a_appris', label: 'Qui vous a appris cette opÃ©ration ?', type: 'text', value: '' },      { key: 'competent_confiant', label: 'Vous sentez-vous compÃ©tent et confiant pour la rÃ©aliser ?', type: 'radio3', value: '' }    ]  },  {    key: 'difficultes',    title: '6. DifficultÃ©s rencontrÃ©es',    questions: [      { key: 'obstacles', label: 'Quels obstacles ou problÃ¨mes rencontrez-vous rÃ©guliÃ¨rement ?', type: 'textarea', value: '' },      { key: 'erreurs_frequentes', label: 'Quelles sont les erreurs les plus frÃ©quentes ?', type: 'textarea', value: '' },      { key: 'etapes_difficiles', label: 'Y a-t-il des Ã©tapes particuliÃ¨rement difficiles ou sources de confusion ?', type: 'textarea', value: '' }    ]  },  {    key: 'ameliorations',    title: '7. AmÃ©liorations proposÃ©es',    questions: [      { key: 'changement_eviter_erreurs', label: 'Que faudrait-il changer pour Ã©viter les erreurs ?', type: 'textarea', value: '' },      { key: 'idees_qualite', label: 'Quelles idÃ©es auriez-vous pour amÃ©liorer la qualitÃ© ?', type: 'textarea', value: '' },      { key: 'idees_securite', label: 'Quelles idÃ©es auriez-vous pour amÃ©liorer la sÃ©curitÃ© ?', type: 'textarea', value: '' }    ]  },  {    key: 'securite_comm',    title: '8. SÃ©curitÃ© & Communication',    questions: [      { key: 'risques_securite', label: 'Y a-t-il des risques de sÃ©curitÃ© liÃ©s Ã  cette opÃ©ration ?', type: 'textarea', value: '' },      { key: 'consignes_identiques', label: 'Les consignes sont-elles identiques entre les diffÃ©rents postes ou Ã©quipes ?', type: 'radio3', value: '' },      { key: 'changement_processus', label: 'Comment recevez-vous les changements de processus ?', type: 'checkboxes', options: ['Affichage', 'Brief', 'Digital', 'Autre'], value: [] },      { key: 'feedback_qualite', label: 'Recevez-vous un retour direct sur la qualitÃ© de votre travail ?', type: 'radio3', value: '' }    ]  },  {    key: 'suivi',    title: '9. Suivi',    questions: [      { key: 'comprehension_explanations', label: 'Lâ€™opÃ©rateur a-t-il compris les explications donnÃ©es ?', type: 'radio3', value: '' },      { key: 'maitrise_apres_accompagnement', label: 'Lâ€™opÃ©ration est-elle mieux maÃ®trisÃ©e aprÃ¨s accompagnement ?', type: 'radio3', value: '' },      { key: 'erreurs_toujours_presentes', label: 'Les erreurs sont-elles toujours prÃ©sentes ?', type: 'radio3', value: '' },      { key: 'actions_complementaires', label: 'Quelles actions complÃ©mentaires sont nÃ©cessaires ?', type: 'textarea', value: '' }    ]  },];export const TWTTPEditor: React.FC<{ module: A3Module; onClose: () => void }> = ({ module, onClose }) => {  const { updateA3Module, projectMembers } = useDatabase();  const [showHelp, setShowHelp] = useState(false);  const [activeTab, setActiveTab] = useState<'questionnaire' | 'actions'>('questionnaire');  // Items (tableau TWTTP)  const initialItems: TWTTPItem[] = useMemo(() => {    const c: any = module.content || {};    return Array.isArray(c.items) ? (c.items as TWTTPItem[]) : [];  }, [module.content]);  const [items, setItems] = useState<TWTTPItem[]>(initialItems);  const persistItems = (next: TWTTPItem[]) => {    setItems(next);    updateA3Module(module.id, { content: { ...(module.content || {}), items: next } });  };  const addRow = () => {    const row: TWTTPItem = {      id: makeId(), step: '', error: '', herca: HERCA_OPTIONS[0], control_kind: 'PrÃ©vention', poka_yoke: '', status: 'Ã€ faire'    };    persistItems([row, ...items]);  };  const updateRow = (id: string, updates: Partial<TWTTPItem>) => {    persistItems(items.map(i => i.id === id ? { ...i, ...updates } : i));  };  const removeRow = (id: string) => {    persistItems(items.filter(i => i.id !== id));  };  // HERCA quick check state  const initialHerca: HercaContent = useMemo(() => {    const c: any = module.content || {};    if (c.herca && Array.isArray(c.herca.categories)) return c.herca as HercaContent;    const cats: HercaCategory[] = [      {        key: '1',        title: '1 - FAIBLESSE PROCESSUS',        questions: [          { code: '1.1', text: "Le processus a-t-il Ã©tÃ© rÃ©alisÃ© en ne suivant pas l'ordre dÃ©fini ?", answer: '' },          { code: '1.2', text: 'Le temps cycle est-il excessivement long (>10 min) ou court (<1 min) ?', answer: '' },        ]      },      {        key: '2',        title: '2 - FAIBLESSE PROCÃ‰DURE',        questions: [          { code: '2.1', text: "Manque-t-il quelque chose dans la description de l'opÃ©ration (SOP, fiche d'opÃ©ration...) ?", answer: '' },          { code: '2.2', text: "Le management visuel est-il incomplet ou peu clair ?", answer: '' },        ]      },      {        key: '3',        title: '3 - OUTILS ET Ã‰QUIPEMENTS',        questions: [          { code: '3.1', text: 'Y a-t-il un manque de conditions de base / maintenance pour les outils ?', answer: '' },          { code: '3.2', text: "Parmi les outils disponibles, l'opÃ©rateur a-t-il choisi le mauvais ?", answer: '' },        ]      }    ];    return { meta: { service: '', team_expert: '', problem: '' }, detection_sources: [], training: {}, categories: cats } as HercaContent;  }, [module.content]);  const [herca, setHerca] = useState<HercaContent>(initialHerca);  const saveHerca = (updates: Partial<HercaContent>) => {    const next = { ...herca, ...updates } as HercaContent;    setHerca(next);    updateA3Module(module.id, { content: { ...(module.content || {}), herca: next } });  };  const setHercaMeta = (k: keyof NonNullable<HercaContent['meta']>, v: string) => {    saveHerca({ meta: { ...(herca.meta || {}), [k]: v } });  };  const setHercaAnswer = (catKey: string, idx: number, answer: AnswerYN) => {    const cats = herca.categories.map((c) => {      if (c.key !== catKey) return c;      const qs = c.questions.slice();      qs[idx] = { ...qs[idx], answer };      return { ...c, questions: qs };    });    saveHerca({ categories: cats });  };  // Questionnaire Usine state  const initialUsineForm: QACategory[] = useMemo(() => {    const c: any = module.content || {};    if (Array.isArray(c.usine_form)) return c.usine_form as QACategory[];    return DEFAULT_USINE_FORM.map(cat => ({      ...cat,      questions: cat.questions.map(q => ({ ...q, value: Array.isArray(q.value) ? ([] as string[]) : (typeof q.value === 'string' ? '' : q.value) }))    }));  }, [module.content]);  const [usineForm, setUsineForm] = useState<QACategory[]>(initialUsineForm);  const saveUsineForm = (next: QACategory[]) => {    setUsineForm(next);    updateA3Module(module.id, { content: { ...(module.content || {}), usine_form: next } });  };  const setQAValue = (catKey: string, qKey: string, value: string | string[]) => {    const next = usineForm.map(cat => {      if (cat.key !== catKey) return cat;      return {        ...cat,        questions: cat.questions.map(q => (q.key === qKey ? { ...q, value } : q))      };    });    saveUsineForm(next);  };  const answeredCount = useMemo(() => {    let count = 0; let total = 0;    for (const cat of usineForm) {      for (const q of cat.questions) {        total += 1;        if (Array.isArray(q.value)) {          if (q.value.length > 0) count += 1;        } else if ((q.value || '').toString().trim() !== '') {          count += 1;        }      }    }    return { count, total };  }, [usineForm]);  const members = useMemo(() => projectMembers.filter(m => m.project_id === module.project_id), [projectMembers, module.project_id]);  return (    <div className="w-full h-full flex flex-col bg-gradient-to-br from-white to-blue-50 rounded-2xl overflow-hidden">      <div className="bg-gradient-to-r from-blue-700 via-indigo-600 to-sky-500 p-5 border-b border-white/10 flex-shrink-0">        <div className="flex items-center justify-between">          <div className="flex items-center gap-4">            <div className="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center">              <Shield className="w-7 h-7 text-white" />            </div>            <div>              <div className="text-2xl font-bold text-white">TWTTP - HERCA</div>              <div className="text-white/80 text-sm">ZÃ©ro erreur humaine â€¢ HERCA â€¢ Poka-Yoke</div>            </div>          </div>          <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 mt-4">            <div className="bg-white rounded-xl border p-4">              <div className="font-semibold text-gray-900 mb-2">Informations (HERCA)</div>              <div className="space-y-2 text-sm">                <div>                  <div className="text-xs text-gray-600">Service / UTE</div>                  <input className="w-full px-2 py-2 border rounded" value={herca.meta?.service || ''} onChange={(e)=>setHercaMeta('service', e.target.value)} />                </div>                <div>                  <div className="text-xs text-gray-600">Team Expert</div>                  <input className="w-full px-2 py-2 border rounded" value={herca.meta?.team_expert || ''} onChange={(e)=>setHercaMeta('team_expert', e.target.value)} />                </div>                <div>                  <div className="text-xs text-gray-600">ProblÃ¨me</div>                  <textarea className="w-full px-2 py-2 border rounded" rows={3} value={herca.meta?.problem || ''} onChange={(e)=>setHercaMeta('problem', e.target.value)} />                </div>              </div>            </div>            <div className="lg:col-span-2 bg-white rounded-xl border p-4">              <div className="font-semibold text-gray-900 mb-2">Sources de dÃ©tection & Formation</div>              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-800">                <div>                  <div className="text-xs text-gray-600 mb-2">Source de dÃ©tection</div>                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">                    {['Responsable UTE','Team Expert',"Membre de l'Ã©quipe",'Quality Gate','EWO','DÃ©claration Non-ConformitÃ©','Matrice QA / QA network'].map(opt => (                      <label key={opt} className="inline-flex items-center gap-2">                        <input type="checkbox" checked={herca.detection_sources?.includes(opt) || false} onChange={()=>saveHerca({ detection_sources: (herca.detection_sources||[]).includes(opt) ? (herca.detection_sources||[]).filter(o=>o!==opt) : [ ...(herca.detection_sources||[]), opt ] })} />                        {opt}                      </label>                    ))}                  </div>                </div>                <div>                  <div className="text-xs text-gray-600 mb-2">Formation</div>                  <div className="space-y-2">                    <label className="flex items-center gap-2"><input type="checkbox" checked={!!herca.training?.formation_poste} onChange={(e)=>saveHerca({ training: { ...(herca.training||{}), formation_poste: e.target.checked } })} />Formation au poste</label>                    <label className="flex items-center gap-2"><input type="checkbox" checked={!!herca.training?.formation_salle} onChange={(e)=>saveHerca({ training: { ...(herca.training||{}), formation_salle: e.target.checked } })} />Formation en salle</label>                    <label className="flex items-center gap-2"><input type="checkbox" checked={!!herca.training?.methodes_videos} onChange={(e)=>saveHerca({ training: { ...(herca.training||{}), methodes_videos: e.target.checked } })} />MÃ©thodes des 2 vidÃ©os</label>                    <label className="flex items-center gap-2"><input type="checkbox" checked={!!herca.training?.aides_visuelles} onChange={(e)=>saveHerca({ training: { ...(herca.training||{}), aides_visuelles: e.target.checked } })} />Aides visuelles</label>                    <div>                      <div className="text-xs text-gray-600">Autre (prÃ©ciser)</div>                      <input className="w-full px-2 py-2 border rounded" value={herca.training?.autre || ''} onChange={(e)=>saveHerca({ training: { ...(herca.training||{}), autre: e.target.value } })} />                    </div>                  </div>                </div>              </div>            </div>          </div>          <div className="flex items-center gap-2">            <button onClick={() => setShowHelp(true)} className="w-10 h-10 bg-white/20 hover:bg-white/30 rounded-xl flex items-center justify-center transition" title="Aide">              <HelpCircle className="w-5 h-5 text-white" />            </button>            <button onClick={onClose} className="w-10 h-10 bg-white/20 hover:bg-white/30 rounded-xl flex items-center justify-center transition" title="Fermer">              <X className="w-6 h-6 text-white" />            </button>          </div>        </div>        <div className="mt-4 flex items-center gap-2">          <button onClick={() => setActiveTab('questionnaire')} className={`px-3 py-1.5 rounded-lg text-sm font-medium ${activeTab === 'questionnaire' ? 'bg-white text-sky-700' : 'bg-white/10 text-white hover:bg-white/15'}`}>Questionnaire</button>          <button onClick={() => setActiveTab('actions')} className={`px-3 py-1.5 rounded-lg text-sm font-medium ${activeTab === 'actions' ? 'bg-white text-sky-700' : 'bg-white/10 text-white hover:bg-white/15'}`}>Tableau TWTTP</button>          <div className="ml-auto text-sm text-white/90">Progression: {answeredCount.count}/{answeredCount.total} rÃ©ponses</div>        </div>      </div>      {activeTab === 'actions' && (        <div className="p-4 flex items-center justify-between bg-white/60 backdrop-blur-sm border-b">          <div className="text-sm text-gray-700">Construisez le plan de prÃ©vention/dÃ©tection des erreurs.</div>          <button onClick={addRow} className="inline-flex items-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm">            <Plus className="w-4 h-4" /> Ajouter une ligne          </button>        </div>      )}      <div className="flex-1 overflow-auto p-4">        {activeTab === 'questionnaire' ? (          {false && (<div className="bg-white border rounded-xl p-6 text-gray-700">            <div className="font-semibold text-gray-900 mb-2">Questionnaire TWTTP + HERCA</div>            <div className="text-sm">Mise en place en coursâ€¦</div>          </div>)}          <div className="bg-white rounded-xl border">            <div className="p-4 border-b flex items-center justify-between">              <div className="font-semibold text-gray-900">Questionnaire TWTTP + HERCA (Usine)</div>              <div className="text-sm text-gray-600">ComplÃ©tion: {answeredCount.count}/{answeredCount.total}</div>            </div>            <div className="p-4 space-y-3">              {usineForm.map((cat) => (                <details key={cat.key} className="rounded-lg border">                  <summary className="cursor-pointer select-none px-3 py-2 text-gray-900 font-medium bg-gray-50 rounded-t-lg">{cat.title}</summary>                  <div className="p-3 space-y-3">                    {cat.questions.map((q) => (                      <div key={q.key} className="space-y-1">                        <div className="text-sm text-gray-800">{q.label}</div>                        {q.type === 'text' && (                          <input className="w-full px-3 py-2 border rounded-lg" value={(q.value as string) || ''} onChange={(e) => setQAValue(cat.key, q.key, e.target.value)} />                        )}                        {q.type === 'textarea' && (                          <textarea className="w-full px-3 py-2 border rounded-lg" rows={3} value={(q.value as string) || ''} onChange={(e) => setQAValue(cat.key, q.key, e.target.value)} />                        )}                        {q.type === 'date' && (                          <input type="date" className="px-3 py-2 border rounded-lg" value={(q.value as string) || ''} onChange={(e) => setQAValue(cat.key, q.key, e.target.value)} />                        )}                        {q.type === 'select' && (                          <select className="px-3 py-2 border rounded-lg bg-white" value={(q.value as string) || ''} onChange={(e) => setQAValue(cat.key, q.key, e.target.value)}>                            <option value=""></option>                            {(q.options || []).map(opt => (<option key={opt} value={opt}>{opt}</option>))}                          </select>                        )}                        {q.type === 'radio3' && (                          <div className="flex items-center gap-4 text-sm">                            {(['Oui', 'Partiellement', 'Non'] as AnswerYN[]).map(ans => (                              <label key={ans} className="inline-flex items-center gap-2">                                <input type="radio" name={`qa-${cat.key}-${q.key}`} checked={q.value === ans} onChange={() => setQAValue(cat.key, q.key, ans)} /> {ans}                              </label>                            ))}                          </div>                        )}                        {q.type === 'checkboxes' && (                          <div className="flex flex-wrap gap-3 text-sm">                            {(q.options || []).map(opt => {                              const arr = Array.isArray(q.value) ? (q.value as string[]) : [];                              const checked = arr.includes(opt);                              return (                                <label key={opt} className="inline-flex items-center gap-2">                                  <input type="checkbox" checked={checked} onChange={() => {                                    const next = checked ? arr.filter(v => v !== opt) : [...arr, opt];                                    setQAValue(cat.key, q.key, next);                                  }} /> {opt}                                </label>                              );                            })}                          </div>                        )}                      </div>                    ))}                  </div>                </details>              ))}            </div>          </div>        ) : (          <div className="min-w-[960px] space-y-2">            <div className="grid grid-cols-12 gap-2 text-xs font-semibold text-gray-600 px-2 py-2">              <div className="col-span-2">Ã‰tape / ActivitÃ©</div>              <div className="col-span-2">Erreur potentielle</div>              <div className="col-span-2">ConsÃ©quence</div>              <div className="col-span-2">Cause (HERCA)</div>              <div className="col-span-2">ContrÃ´le</div>              <div className="col-span-2">Responsable / Ã‰chÃ©ance / Statut</div>            </div>            {items.length === 0 && (              <div className="p-6 text-center text-gray-500 bg-white border rounded-xl">Aucune ligne. Utilisez le bouton en haut pour ajouter.</div>            )}            {items.map((it: any) => (              <div key={it.id} className="grid grid-cols-12 gap-2 bg-white rounded-xl border p-3">                <div className="col-span-2">                  <input className="w-full px-2 py-2 border rounded-lg text-sm" placeholder="Ex: Monter la piÃ¨ce" value={it.step} onChange={(e)=>updateRow(it.id,{ step: e.target.value })} />                </div>                <div className="col-span-2">                  <input className="w-full px-2 py-2 border rounded-lg text-sm" placeholder="Ex: Oubli de serrage" value={it.error} onChange={(e)=>updateRow(it.id,{ error: e.target.value })} />                </div>                <div className="col-span-2">                  <input className="w-full px-2 py-2 border rounded-lg text-sm" placeholder="Ex: Non-conformitÃ©" value={it.consequence||''} onChange={(e)=>updateRow(it.id,{ consequence: e.target.value })} />                </div>                <div className="col-span-2">                  <select className="w-full px-2 py-2 border rounded-lg text-sm bg-white" value={it.herca} onChange={(e)=>updateRow(it.id,{ herca: e.target.value })}>                    {['ProcÃ©dure / Standard','Connaissance / Formation','Outillage / Interface','Communication','Attention / MÃ©moire','Environnement / Organisation'].map(opt => (<option key={opt} value={opt}>{opt}</option>))}                  </select>                </div>                <div className="col-span-2">                  <div className="flex items-center gap-2 mb-2">                    <select className="w-40 px-2 py-2 border rounded-lg text-sm bg-white" value={it.control_kind} onChange={(e)=>updateRow(it.id,{ control_kind: e.target.value })}>                      <option>PrÃ©vention</option>                      <option>DÃ©tection</option>                      <option>Correction</option>                    </select>                    <span className="text-xs text-gray-500">Pokaâ€‘Yoke</span>                  </div>                  <input className="w-full px-2 py-2 border rounded-lg text-sm" placeholder="Ex: Gabarit, capteurâ€¦" value={it.poka_yoke} onChange={(e)=>updateRow(it.id,{ poka_yoke: e.target.value })} />                </div>                <div className="col-span-2">                  <div className="flex items-center gap-2 mb-2">                    <User className="w-4 h-4 text-gray-500" />                    <select className="flex-1 px-2 py-2 border rounded-lg text-sm bg-white" value={it.owner_id || ''} onChange={(e)=>updateRow(it.id,{ owner_id: e.target.value || undefined })}>                      <option value="">Non assignÃ©</option>                      {members.map(m => (<option key={m.id} value={m.user_id}>{m.user_id}</option>))}                    </select>                  </div>                  <div className="flex items-center gap-2 mb-2">                    <CalendarDays className="w-4 h-4 text-gray-500" />                    <input type="date" className="px-2 py-2 border rounded-lg text-sm" value={it.due_date || ''} onChange={(e)=>updateRow(it.id,{ due_date: e.target.value })} />                  </div>                  <div className="flex items-center gap-2 mb-2">                    <Check className="w-4 h-4 text-gray-500" />                    <select className="flex-1 px-2 py-2 border rounded-lg text-sm bg-white" value={it.status || 'Ã€ faire'} onChange={(e)=>updateRow(it.id,{ status: e.target.value })}>                      {(['Ã€ faire','En cours','Fait'] as const).map(s => (<option key={s} value={s}>{s}</option>))}                    </select>                  </div>                  <div className="flex items-center justify-between pt-1">                    <button onClick={()=>removeRow(it.id)} className="inline-flex items-center gap-1 text-red-600 hover:text-red-700 text-xs" title="Supprimer la ligne">                      <Trash2 className="w-3.5 h-3.5" /> Supprimer                    </button>                  </div>                </div>              </div>            ))}          </div>        )}      </div>      {showHelp && (        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">          <div className="bg-white max-w-3xl w-full rounded-2xl p-6 shadow-xl">            <div className="flex items-center justify-between mb-3">              <div className="text-lg font-semibold text-gray-900">Aide TWTTP</div>              <button onClick={() => setShowHelp(false)} className="p-2 rounded-lg hover:bg-gray-100">                <X className="w-5 h-5 text-gray-600" />              </button>            </div>            <TWTTPHelp />          </div>        </div>      )}    </div>  );};